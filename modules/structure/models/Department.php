<?php

namespace app\modules\structure\models;

use app\modules\hr\models\Employee;
use rmrevin\yii\fontawesome\FA;
use Yii;

use MongoDB\BSON\ObjectID;

use yii\helpers\ArrayHelper;
use yii\helpers\Html;
use yii\helpers\Url;
use yii\mongodb\ActiveRecord;

use yii\behaviors\TimestampBehavior;

use app\modules\structure\Module;

/**
 * This is the model class for collection "structure_department".
 *
 * @property ObjectID|string $_id
 * @property string $name
 * @property mixed $icon
 * @property integer $created_at
 * @property integer $updated_at
 *
 * @property ObjectID|string $_parent
 * @property Department $parent
 * @property Department[] $childs
 *
 * @package app\modules\structure\models
 */
class Department extends ActiveRecord
{
    /**
     * @inheritdoc
     */
    public static function collectionName()
    {
        return 'structure_department';
    }

    /**
     * @inheritdoc
     */
    public function attributes()
    {
        return [
            '_id',
            'name',
            'icon',
            '_parent',
            'created_at',
            'updated_at',
        ];
    }

    public function scenarios()
    {
        return [
            self::SCENARIO_DEFAULT => [
                'name',
                'icon',
                '_parent',
            ],
        ];
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            ['name', 'string', 'max' => 255],
            ['icon', 'in', 'range' => array_keys(self::iconsList())],
            ['_parent', 'filter', 'filter' => function($value) {
                if ($model = self::findOne($value)) {
                    return $model->getId(false);
                }
                return null;
            }],
            ['_parent', 'default', 'value' => null],
            //[['name', 'icon', '_parent', 'created_at', 'updated_at'], 'safe']
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            '_id' => Module::t('department', 'ATTR__ID__LABEL'),
            'name' => Module::t('department', 'ATTR__NAME__LABEL'),
            'icon' => Module::t('department', 'ATTR__ICON__LABEL'),
            '_parent' => Module::t('department', 'ATTR__PARENT__LABEL'),
            'created_at' => Module::t('department', 'ATTR__CREATED_AT__LABEL'),
            'updated_at' => Module::t('department', 'ATTR__UPDATED_AT__LABEL'),
        ];
    }

    public function behaviors()
    {
        return [
            TimestampBehavior::className(),
        ];
    }

    public function beforeDelete()
    {
        foreach ($this->getAllChilds() as $child) {
            $child->delete();
        }
        return parent::beforeDelete(); // TODO: Change the autogenerated stub
    }

    /**
     * @return DepartmentQuery
     */
    public static function find()
    {
        return new DepartmentQuery(get_called_class());
    }

    /**
     * @return \yii\db\ActiveQueryInterface
     */
    public function getParent()
    {
        return $this->hasOne(self::className(), ['_id' => '_parent']);
    }

    /**
     * @return \yii\db\ActiveQueryInterface
     */
    public function getChilds()
    {
        return $this->hasMany(self::className(), ['_parent' => '_id']);
    }

    /**
     * @param bool $toString
     * @return ObjectID|string
     */
    public function getId($toString = true)
    {
        return $toString ? (string)$this->_id : $this->_id;
    }

    /**
     * @param callable $closure
     * @return array
     */
    public static function getTree($closure)
    {
        $models = self::find()->all();
        return self::buildTree($models, '', $closure);
    }

    /**
     * @param Department[] $models
     * @param string $_parent
     * @param callable $closure
     * @param integer $nestingLevel
     * @return array
     */
    public static function buildTree($models, $_parent, $closure, $nestingLevel = 0)
    {
        $data = [];
        foreach ($models as $model) {
            if ((string) $model->_parent === $_parent) {
                
                if (is_callable($closure)) {
                    $closure($data, $model, $models, $closure, $nestingLevel);
                }
                //$data[] = [
                //    'id' => $id,
                //    'name' => $model->name,
                //    'nodes' => self::buildTree($models, $id),
                //];
            }
        }
        return $data;
    }

    /**
     * Get options for [[_parent]] DropDownList
     * @param string $charIndentNesting
     * @return array
     */
    public function getParentDropDownListOptions($charIndentNesting = '')
    {
        return Department::getTree(function(&$data, $model, $models, $selfClosure, $nestingLevel) use ($charIndentNesting) {
            /** @var array $data */
            /** @var Department $model */
            /** @var Department[] $models */
            /** @var integer $nestingLevel */
            /** @var callable $selfClosure */
            $id = $model->getId(true);
            $data[$id] = str_repeat($charIndentNesting, $nestingLevel) . ' ' . $model->name;
            $data = array_merge($data, Department::buildTree($models, $id, $selfClosure, $nestingLevel + 1));
        });
    }

    public static function treeItemsForDropDownList($charIndentNesting = '')
    {
        return Department::getTree(function(&$data, $model, $models, $selfClosure, $nestingLevel) use ($charIndentNesting) {
            /** @var array $data */
            /** @var Department $model */
            /** @var Department[] $models */
            /** @var integer $nestingLevel */
            /** @var callable $selfClosure */
            $id = $model->getId(true);
            $data[$id] = str_repeat($charIndentNesting, $nestingLevel) . ' ' . $model->name;
            $data = array_merge($data, Department::buildTree($models, $id, $selfClosure, $nestingLevel + 1));
        });
    }

    /**
     * Get disabled options for [[_parent]] DropDownList <br/>
     * Disabled self model, and all childs models
     * @see Department::getParentDropDownListOptions
     * @return array
     */
    public function getParentDropDownListDisabledOptions()
    {
        $models = ArrayHelper::merge([$this], $this->getAllChilds());
        return ArrayHelper::map($models, function($model) {
            /** @var self $model */
            return $model->getId(true);
        }, function ($model) {
            /** @var self $model */
            return [
                'disabled' => true,
            ];
        });
    }

    /**
     * Get all childs models
     * @param bool $withSelf Add self model to return array
     * @return Department[]|array
     */
    public function getAllChilds($withSelf = false)
    {
        $childs = $this->childsRecursive($this->childs);
        if ($withSelf) {
            $childs[] = $this;
        }
        return $childs;
    }

    /**
     * Recursive helper method for method "getAllChilds"
     * @param Department[] $models
     * @see Department::getAllChilds
     * @return Department[]|array
     */
    protected function childsRecursive($models)
    {
        $data = [];
        foreach ($models as $model) {
            $data[] = $model;
            $data = ArrayHelper::merge($data, $this->childsRecursive($model->childs));
        }
        return $data;
    }

    public static function treeViewData()
    {
        return Department::getTree(function(&$data, $model, $models, $selfClosure, $nestingLevel) {
            /** @var array $data */
            /** @var Department $model */
            /** @var Department[] $models */
            /** @var integer $nestingLevel */
            /** @var callable $selfClosure */
            $id = $model->getId(true);
            $countsEmployees = 0;
            $item = [
                'text' => $model->name,
                'icon' => $model->icon,
                'href' => Url::to(['/structure/department/view', 'id' => $model->getId(true)]),
                'tags' => [$countsEmployees],
            ];
            $nodes = Department::buildTree($models, $id, $selfClosure, $nestingLevel + 1);
            if (sizeof($nodes) > 0) {
                $item['nodes'] = $nodes;
            }
            $data[] = $item;
        });
    }

    /**
     * @return array
     */
    public static function iconsList()
    {
        return FA::getConstants();
    }

    /**
     * @return array
     */
    public function getViewRoute()
    {
        return ['/structure/department/view', 'id' => $this->getId(true)];
    }

    /**
     * @param bool $scheme
     * @return string
     */
    public function getViewUrl($scheme = false)
    {
        return Url::to($this->getViewRoute(), $scheme);
    }


    /**
     * @param bool $renderIcon
     * @return string
     */
    public function getName($renderIcon = false)
    {
        $name = $this->name;
        $icon = $this->renderIcon();
        if ($renderIcon) {
            $name = "$icon $name";
        }
        return $name;
    }

    public function renderIcon()
    {
        return Html::tag('i', '', ['class' => $this->icon]);
    }
}
