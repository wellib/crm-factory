<?php

namespace app\modules\hr\models\embedded;

use MongoDB\BSON\ObjectID;

use app\modules\hr\Module;

use app\modules\hr\models\Order;
use app\modules\hr\models\DictionaryWord;
use app\modules\hr\validators\DictionaryWordValidator;
use app\modules\hr\traits\DictionaryWordEmbedded;


/**
 * Class Fired
 *
 * @property string $date Дата увольнения (строка)
 * @property integer $date_unixtime Дата увольнения (UNIX-время)
 *
 * @property string $based_on_documents Основание увольнения [на основании каких документов] (документ, номер дала)
 *
 * @property ObjectID $__based_on_dismissal Основание увольнения (по собственному желани, по соглашению сторон)
 *
 * @package app\modules\hr\models\embedded
 */
class Fired extends EmbeddedModel
{
    use DictionaryWordEmbedded;

    const DATE_REGEXP_PATTERN = '/^[0-9]{1,2}\.[0-9]{1,2}\.[0-9]{4}$/i';
    const DATE_REGEXP_PATTERN_LABEL = 'дд.мм.гггг';
    const DATE_REGEXP_PATTERN_FOR_DATE_PICKER = 'dd.mm.yyyy';
    const DATE_PHP_FORMAT = 'd.m.Y';

    public $date;
    /** @var integer */
    public $date_unixtime;
    /** @var string */
    public $based_on_documents;
    /** @var ObjectID */
    public $__base_dismissal;


    public function scenarios()
    {
        return [
            self::SCENARIO_DEFAULT => [
                'date',
                'based_on_documents',
                '__base_dismissal',
            ],
        ];
    }

    /**
     * @return array
     */
    public function rules()
    {
        return [
            ['based_on_documents', 'string'],

            ['date', 'match',
                'pattern' => self::DATE_REGEXP_PATTERN,
                'message' => Module::t('fired', 'DATE__VALIDATE_MESSAGE__BAD_DATE', [
                    'format' => self::DATE_REGEXP_PATTERN_LABEL,
                ]),
            ],

            ['__base_dismissal', DictionaryWordValidator::className(), 'dictionary' => DictionaryWord::DICTIONARY_BASE_DISMISSAL],

            [['date', 'based_on_documents', '__base_dismissal'], 'required'],
        ];
    }

    /**
     * @return array
     */
    public function attributeLabels()
    {
        return [
            'date'               => Module::t('fired', 'ATTR__DATE__LABEL'),
            'based_on_documents' => Module::t('fired', 'ATTR__BASED_ON_DOCUMENTS__LABEL'),
            '__base_dismissal'   => Module::t('fired', 'ATTR__BASE_DISMISSAL__LABEL'),
        ];
    }

    public function afterValidate()
    {
        $this->date_unixtime = ($date_unixtime = strtotime($this->date) !== false) ? $date_unixtime : null;
        parent::afterValidate(); // TODO: Change the autogenerated stub
    }

    /**
     * Основание увольнения (по собственному желани, по соглашению сторон)
     * @return string|null
     */
    public function getBaseDismissal()
    {
        if ($model = $this->getDictionaryWordModelByAttribute('__base_dismissal')) {
            return $model->getWord();
        }
        return null;
    }

    protected static function labelForExportColumn($message)
    {
        return Module::t('fired', 'MODEL_NAME') . ': ' . Module::t('fired', $message);
    }

    public static function exportColumnsConfig($attribute)
    {
        return [
            [
                'attribute' => $attribute . '.date',
                'label' => self::labelForExportColumn('ATTR__DATE__LABEL'),
            ],
            [
                'attribute' => $attribute . '.based_on_documents',
                'label' => self::labelForExportColumn('ATTR__BASED_ON_DOCUMENTS__LABEL'),
            ],
            [
                'attribute' => $attribute . '.__base_dismissal',
                'label' => self::labelForExportColumn('ATTR__BASE_DISMISSAL__LABEL'),
                'value' => function($model) {
                    /** @var Order $model */
                    return $model->fired->getBaseDismissal();
                }
            ],
        ];
    }
}