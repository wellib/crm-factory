<?php

namespace app\modules\todo\models;

use Yii;
use yii\behaviors\TimestampBehavior;
use app\modules\todo\Module;

/**
 * This is the model class for collection "todo_calendar_period".
 *
 * @property \MongoDB\BSON\ObjectID|string $_id
 * @property string $from_date
 * @property string $to_date
 * @property boolean $every_year
 * @property mixed $type
 * @property string $name
 * @property integer $created_at
 * @property integer $updated_at
 */
class CalendarPeriod extends \yii\mongodb\ActiveRecord
{
    /**
     * Рабочие дни
     */
    const TYPE_WORKDAYS = 'workdays';

    /**
     * Выходные дни (праздники)
     */
    const TYPE_HOLIDAYS = 'holidays';

    /**
     * @var string
     */
    public $fromDateFormat;

    /**
     * @var string
     */
    public $toDateFormat;

    /**
     * @inheritdoc
     */
    public static function collectionName()
    {
        return 'todo_calendar_period';
    }

    /**
     * @inheritdoc
     */
    public function attributes()
    {
        return [
            '_id',
            'from_date',
            'to_date',
            'every_year',
            'name',
            'type',
            'created_at',
            'updated_at',
        ];
    }

    public function scenarios()
    {
        return [
            self::SCENARIO_DEFAULT => ['fromDateFormat', 'toDateFormat', 'name', 'type', 'every_year'],
        ];
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            //[['from_date', 'to_date', 'every_year', 'name', 'type'], 'safe'],
            [['name'], 'string'],
            [['from_date', 'to_date', 'created_at', 'updated_at'], 'integer'],
            [['fromDateFormat', 'toDateFormat'], 'match', 'pattern' => '/^[0-9]{1,2}\.[0-9]{1,2}\.[0-9]{4}$/i' , 'message' => Module::t('calendar_period', 'VALIDATE_MESSAGE__BAD_DATE_FORMAT', [
                'format' => 'дд.мм.гггг'
            ])],
            [['every_year'], 'boolean'],
            [['fromDateFormat', 'toDateFormat', 'name', 'type'], 'required'],
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            '_id'            => Module::t('calendar_period', 'ATTR__ID__LABEL'),
            'from_date'      => Module::t('calendar_period', 'ATTR__FROM_DATE__LABEL'),
            'fromDateFormat' => Module::t('calendar_period', 'ATTR__FROM_DATE__LABEL__ALT'),
            'to_date'        => Module::t('calendar_period', 'ATTR__TO_DATE__LABEL'),
            'toDateFormat'   => Module::t('calendar_period', 'ATTR__TO_DATE__LABEL__ALT'),
            'every_year'     => Module::t('calendar_period', 'ATTR__EVERY_YEAR__LABEL'),
            'name'           => Module::t('calendar_period', 'ATTR__NAME__LABEL'),
            'type'           => Module::t('calendar_period', 'ATTR__TYPE__LABEL'),
            'created_at'     => Module::t('calendar_period', 'ATTR__CREATED_AT__LABEL'),
            'updated_at'     => Module::t('calendar_period', 'ATTR__UPDATED_AT__LABEL'),
        ];
    }

    public function behaviors()
    {
        return [
            TimestampBehavior::className(),
        ];
    }

    public function beforeSave($insert)
    {
        if ($fromDateFormat = strtotime($this->fromDateFormat)) {
            $this->from_date = $fromDateFormat;
        } else {
            $this->from_date = null;
        }

        if ($toDateFormat = strtotime($this->toDateFormat)) {
            $this->to_date = $toDateFormat;
        } else {
            $this->to_date = null;
        }

        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }


    public function afterFind()
    {
        parent::afterFind(); // TODO: Change the autogenerated stub

        if (!empty($this->from_date)) {
            $this->fromDateFormat = date('d.m.Y', $this->from_date);
        }

        if (!empty($this->to_date)) {
            $this->toDateFormat = date('d.m.Y', $this->to_date);
        }
    }

    public function getTypeList()
    {
        return [
            self::TYPE_HOLIDAYS => Module::t('calendar_period', 'ATTR__TYPE__VALUE__HOLIDAYS'),
            self::TYPE_WORKDAYS => Module::t('calendar_period', 'ATTR__TYPE__VALUE__WORKDAYS'),
        ];
    }

    public function getTypeLabel()
    {
        $list = $this->getTypeList();
        if (isset($list[$this->type])) {
            return $list[$this->type];
        }
        return null;
    }

    public function getFromDateFormat()
    {
        $pattern = 'd MMMM';
        if (empty($this->every_year)) {
            $pattern .= ' yyyy г.';
        }
        return Yii::$app->formatter->asDate($this->from_date, $pattern);
    }

    public function getToDateFormat()
    {
        $pattern = 'd MMMM';
        if (empty($this->every_year)) {
            $pattern .= ' yyyy г.';
        }
        return Yii::$app->formatter->asDate($this->to_date, $pattern);
    }
    
    public function getEveryYearDropDownOptions()
    {
        return [
            0 => Module::t('calendar_period', 'ATTR__EVERY_YEAR__VALUE__NO'),
            1 => Module::t('calendar_period', 'ATTR__EVERY_YEAR__VALUE__YES'),
        ];
    }

    public static function listByType($type)
    {
        $list = [];
        $models = self::find()->where(['type' => $type])->all();
        foreach ($models as $model) {
            /** @var self $model */
            $dateCursor = $model->from_date;
            while ($dateCursor <= $model->to_date) {
                $date = date('d.m.Y', $dateCursor);
                //if (!empty($model->every_year)) {
                //    $date .= date('.Y');
                //} else {
                //    $date .= date('.Y', $dateCursor);
                //}
                $list[] = $date;
                $dateCursor += 60 * 60 * 24;
            }
        }
        return array_unique($list);
    }

    public static function buildCalendar($month,$year)
    {

        // Create array containing abbreviations of days of week.
        $daysOfWeek = ['ПН','ВТ','СР','ЧТ','ПТ','СБ','ВС'];

        // What is the first day of the month in question?
        $firstDayOfMonth = mktime(0,0,0,$month,1,$year);

        // How many days does this month contain?
        $numberDays = date('t',$firstDayOfMonth);

        // Retrieve some information about the first day of the
        // month in question.
        $dateComponents = getdate($firstDayOfMonth);

        // What is the name of the month in question?
        $monthName = $dateComponents['month'];

        // What is the index value (0-6) of the first day of the
        // month in question.
        $dayOfWeek = $dateComponents['wday'];
        //$dayOfWeek2 = date('w', $firstDayOfMonth);
        //var_dump($dayOfWeek2);
        // Create the table tag opener and day headers

        $calendar = "<table class='table table-bordered calendar'>";
        $calendar .= "<caption>$monthName $year</caption>";
        $calendar .= "<tr>";

        // Create the calendar headers

        foreach($daysOfWeek as $day) {
            $calendar .= "<th class='header'>$day</th>";
        }

        // Create the rest of the calendar

        // Initiate the day counter, starting with the 1st.

        $currentDay = 1;

        $calendar .= "</tr></theade><tbody><tr>";

        // The variable $dayOfWeek is used to
        // ensure that the calendar
        // display consists of exactly 7 columns.

        if ($dayOfWeek > 1 && $dayOfWeek <= 6) {
            //$dayOfWeek -= 1;
            $calendar .= "<td colspan='" . ($dayOfWeek - 1) . "'>&nbsp;</td>";
        }

        $month = str_pad($month, 2, "0", STR_PAD_LEFT);

        while ($currentDay <= $numberDays) {

            // Seventh column (Saturday) reached. Start a new row.

            if ($dayOfWeek == 8) {

                $dayOfWeek = 1;
                $calendar .= "</tr><tr>";

            }

            $currentDayRel = str_pad($currentDay, 2, "0", STR_PAD_LEFT);

            $date = "$year-$month-$currentDayRel";

            $calendar .= "<td class='day" . $currentDay . "' rel='$date'>$currentDay</td>";

            // Increment counters

            $currentDay++;
            $dayOfWeek++;

        }



        // Complete the row of the last week in month, if necessary

        if ($dayOfWeek != 8) {

            $remainingDays = 8 - $dayOfWeek;
            $calendar .= "<td colspan='$remainingDays'>&nbsp;</td>";

        }

        $calendar .= "</tr>";

        $calendar .= "</tbody></table>";

        return $calendar;

    }

}
